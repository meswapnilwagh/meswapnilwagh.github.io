<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>How To Deploy NodeJS Apps With PM2 &amp; NGINX In Cluster Mode On Production Environment</title>
      <link href="/2020/05/16/how-to-deploy-nodejs-apps-with-pm2-&amp;-ngnix-in-cluster-mode-on-production-environment/"/>
      <url>/2020/05/16/how-to-deploy-nodejs-apps-with-pm2-&amp;-ngnix-in-cluster-mode-on-production-environment/</url>
      
        <content type="html"><![CDATA[<h2 id="What-is-Process-Manager"><a href="#What-is-Process-Manager" class="headerlink" title="What is Process Manager?"></a>What is Process Manager?</h2><p>Process Manager is a special program design to effectively manage server process and take benefit of server resources. It’s useful to keep application online and restart on failure.</p><p>Process Manager is also useful for clustering, logging and monitoring the application. Process Managers make it possible to demonize the application so it will be running in background as a service.</p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites:"></a>Prerequisites:</h2><p>In this tutorial we assume that you have following setup:</p><ul><li>Ubuntu server and a user with root / sudo privileges</li><li>All the necessary package installed to run simple NodeJS App</li></ul><h2 id="Which-Process-Manager"><a href="#Which-Process-Manager" class="headerlink" title="Which Process Manager?"></a>Which Process Manager?</h2><p>There are multiple Process Manager available, as listed below but in this tutorial we will be focusing on <strong>PM2</strong>.</p><ul><li><a href="https://pm2.keymetrics.io/" target="_blank" rel="noopener">PM2</a></li><li><a href="https://strong-pm.io/" target="_blank" rel="noopener">StrongLoop PM</a></li><li><a href="https://github.com/foreversd/forever" target="_blank" rel="noopener">Forever</a></li></ul><h2 id="Why-PM2"><a href="#Why-PM2" class="headerlink" title="Why PM2?"></a>Why PM2?</h2><p>Following are the complete features set of PM2</p><p><img src="https://i.imgur.com/4yXiyrt.png" alt="PM2 Features"></p><h2 id="Install-Process-Manager"><a href="#Install-Process-Manager" class="headerlink" title="Install Process Manager:"></a>Install Process Manager:</h2><p> Use <code>npm</code> to install the pm2 globally so it will available system-wide for use</p><pre><code class="bash">$ sudo npm i pm2 -g</code></pre><p>Now let start our NodeJS app using <code>pm2 start</code> command</p><p>First change the directory to our node application directory</p><pre><code class="bash">$ cd /opt/hello-pm2/$ pm2 start app.js --name Hello -i 2 --watch</code></pre><p>It will also register our app in the process list of PM2, which you can see in the output of the above command</p><p><img src="https://i.imgur.com/OaLuQGO.png" alt="Output of PM2 Start"></p><h2 id="PM2-as-a-service"><a href="#PM2-as-a-service" class="headerlink" title="PM2 as a service:"></a>PM2 as a service:</h2><p>PM2 will take care of all the application running under it and will restart automatically if the application killed or crash, but what if the system boot or reboot? PM2 has answer for this, PM2 provide an easy way to start PM2 as a system service in <code>systemd</code>.</p><p>The <code>startup</code> command generate and configure a PM2 startup script.</p><pre><code class="bash">$ pm2 startup</code></pre><p>Now to setup the startup script copy/paste the last line from the output or earlier command,</p><pre><code class="bash">[PM2] Init System found: systemdmeswapnilwagh[PM2] To setup the Startup Script, copy/paste the following command:sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u meswapnilwagh --hp /home/meswapnilwagh</code></pre><p>Run the command to setup PM2 to start on boot/reboot </p><pre><code class="bash">sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u meswapnilwagh --hp /home/meswapnilwagh</code></pre><h2 id="Basic-PM2-Commands"><a href="#Basic-PM2-Commands" class="headerlink" title="Basic PM2 Commands:"></a>Basic PM2 Commands:</h2><p>Just like all other command line utility, PM2 also comes with bundle of subcommands which are helpful to manage application running under PM2</p><h3 id="Start-Application-in-cluster"><a href="#Start-Application-in-cluster" class="headerlink" title="Start Application in cluster"></a>Start Application in cluster</h3><p>To start application in cluster mode you can use <code>-i</code> flag and specify the number of instances you want to run you can also use <code>--name</code> flag to name your process.</p><pre><code class="bash">sudo pm2 start /opt/hello-pm2/app.js --name Hello -i 4</code></pre><h3 id="Stop-Application"><a href="#Stop-Application" class="headerlink" title="Stop Application"></a>Stop Application</h3><pre><code class="bash">sudo pm2 stop Hello</code></pre><h3 id="Restart-Application"><a href="#Restart-Application" class="headerlink" title="Restart Application"></a>Restart Application</h3><pre><code class="bash">sudo pm2 restart Hello</code></pre><h3 id="List-Applications"><a href="#List-Applications" class="headerlink" title="List Applications"></a>List Applications</h3><pre><code class="bash">sudo pm2 list</code></pre><h3 id="Monitor-Application-Process"><a href="#Monitor-Application-Process" class="headerlink" title="Monitor Application Process"></a>Monitor Application Process</h3><pre><code class="bash">sudo pm2 monit</code></pre><p>For more usage of PM2 please refer <a href="https://pm2.keymetrics.io/docs/usage/quick-start/" target="_blank" rel="noopener">PM2 quick start</a>.</p><h2 id="NGINX-As-Reverse-Proxy"><a href="#NGINX-As-Reverse-Proxy" class="headerlink" title="NGINX As Reverse Proxy :"></a><a href="https://www.nginx.com" target="_blank" rel="noopener">NGINX</a> As Reverse Proxy :</h2><p>Till now we configure PM2 and running our node app in cluster seems all good, but are you still ready for production? How can you get rid of that port in your URL? Answer to all your question is Nginx (Engine-X).</p><h3 id="What-is-NGINX"><a href="#What-is-NGINX" class="headerlink" title="What is NGINX?"></a>What is NGINX?</h3><p>Officially, Nginx is a web server which can also be used as a reverse proxy, load balancer, mail proxy and HTTP cache. </p><p>Best practice to deploy NodeJS application in production, is by using Nginx as reverse proxy to route the web client’s requests to appropriate node process.</p><h3 id="Install-NGINX"><a href="#Install-NGINX" class="headerlink" title="Install NGINX"></a>Install NGINX</h3><p>Use following command to install Nginx on Ubuntu</p><pre><code class="bash">$ sudo apt-get update$ sudo apt-get install nginx</code></pre><h3 id="Configure-NGINX"><a href="#Configure-NGINX" class="headerlink" title="Configure NGINX"></a>Configure NGINX</h3><p>Open the nginx default site config file:</p><pre><code class="bash">$ sudo nano /etc/nginx/sites-available/default</code></pre><p>Now add below configuration in the file (You can take backup of original file for safer side)</p><pre><code class="bash">server {  listen       80;  server_name  mycooldomain.com;  location / {    proxy_pass http://localhost:4000;    proxy_http_version 1.1;    proxy_set_header Upgrade $http_upgrade;    proxy_set_header Connection &#39;upgrade&#39;;    proxy_set_header Host $host;    proxy_cache_bypass $http_upgrade;  }}</code></pre><p>As you can see the nginx listening on <a href="http://mycooldomain.com" target="_blank" rel="noopener">http://mycooldomain.com</a> and the <code>location /</code> block take care of the incoming request and forwarding to NodeJS application.</p><p>Save the file and restart nginx,</p><pre><code class="bash">$ sudo service nginx restart</code></pre><p>Now open your browser and navigate to <a href="http://mycooldomain.com" target="_blank" rel="noopener">http://mycooldomain.com</a>, you can see how node app is being served without using any port in URL.</p><p><strong>Congratulations</strong>!! You had successfully deployed NodeJS app on production using PM2 and Ngnix.</p><p>Hope you find this tutorial helpful. Don’t forget to share if its really help you. For any query please DM at <a href="https://twitter.com/meswapnilwagh" target="_blank" rel="noopener">Swapnil Wagh</a></p>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PM2 </tag>
            
            <tag> Cluster </tag>
            
            <tag> Production </tag>
            
            <tag> Reverse Proxy </tag>
            
            <tag> NodeJS </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How To Setup NodeJs in Cluster on Production Environments Using PM2 &amp; NGNIX</title>
      <link href="/2020/05/16/How-To-Setup-NodeJs-in-Cluster-on-Production-Environments-Using-PM2/"/>
      <url>/2020/05/16/How-To-Setup-NodeJs-in-Cluster-on-Production-Environments-Using-PM2/</url>
      
        <content type="html"><![CDATA[<h2 id="What-is-Process-Manager"><a href="#What-is-Process-Manager" class="headerlink" title="What is Process Manager?"></a>What is Process Manager?</h2><p>Process Manager is a special program design to effectively manage server process and take benefit of server resources. It’s useful to keep application online and restart on failure.</p><p>Process Manager is also useful for clustrig, logging and monitoring the application. Process Managers make it possbile to daemonize the application so it will be running in background as a service.</p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites:"></a>Prerequisites:</h2><p>In this tutorial we assume that you have following setup:</p><ul><li>Ubuntu server and a user with root / sudo privileges</li><li>All the necessary package installed to run simple NodeJS App</li></ul><h2 id="Which-Process-Manager"><a href="#Which-Process-Manager" class="headerlink" title="Which Process Manager?"></a>Which Process Manager?</h2><p>There are multiple Process Manager available, as listed below but in this tutorial we will be focusing on <strong>PM2</strong>.</p><ul><li><a href="https://pm2.keymetrics.io/" target="_blank" rel="noopener">PM2</a></li><li><a href="https://strong-pm.io/" target="_blank" rel="noopener">StrongLoop PM</a></li><li><a href="https://github.com/foreversd/forever" target="_blank" rel="noopener">Forever</a></li></ul><h2 id="Why-PM2"><a href="#Why-PM2" class="headerlink" title="Why PM2?"></a>Why PM2?</h2><p>Following are the complete features set of PM2</p><p><img src="https://i.imgur.com/4yXiyrt.png" alt="PM2 Features"></p><h2 id="Install-Process-Manager"><a href="#Install-Process-Manager" class="headerlink" title="Install Process Manager:"></a>Install Process Manager:</h2><p> Use <code>npm</code> to install the pm2 globally so it will available system-wide for use</p><pre><code class="bash">$ sudo npm i pm2 -g</code></pre><p>Now let start our nodejs app using <code>pm2 start</code> command</p><p>First change the directory to our node application directory</p><pre><code class="bash">$ cd /opt/hello-pm2/$ pm2 start app.js --name Hello -i 2 --watch</code></pre><p>It will also register our app in the process list of PM2, which you can see in the output of the above command</p><p><img src="https://i.imgur.com/OaLuQGO.png" alt="Output of PM2 Start"></p><h2 id="PM2-as-a-service"><a href="#PM2-as-a-service" class="headerlink" title="PM2 as a service:"></a>PM2 as a service:</h2><p>PM2 will take care of all the application running ubder it and will restart automatically if the application killed or crash, but what if the system boot or reboot? PM2 has answer for this, PM2 provide an easy way to start PM2 as a system service in <code>systemd</code>.</p><p>The <code>startup</code> command generate and configure a PM2 startup script.</p><pre><code class="bash">$ pm2 startup</code></pre><p>Now to setup the startup script copy/paste the last line from the output or earler command,</p><pre><code class="bash">[PM2] Init System found: systemdmeswapnilwagh[PM2] To setup the Startup Script, copy/paste the following command:sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u meswapnilwagh --hp /home/meswapnilwagh</code></pre><p>Run the command to setup PM2 to start on boot/reboot </p><pre><code class="bash">sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u meswapnilwagh --hp /home/meswapnilwagh</code></pre><h2 id="Basic-PM2-Commands"><a href="#Basic-PM2-Commands" class="headerlink" title="Basic PM2 Commands:"></a>Basic PM2 Commands:</h2><p>Just like all other command line utility, PM2 also comes with bundle of subcommands which are helpful to manage application running under PM2</p><h3 id="Start-Application-in-cluster"><a href="#Start-Application-in-cluster" class="headerlink" title="Start Application in cluster"></a>Start Application in cluster</h3><p>To start appplication in cluser mode you can use <code>-i</code> flag and specify the number of instances you want to run you can also use <code>--name</code> flag to name your process.</p><pre><code class="bash">sudo pm2 start /opt/hello-pm2/app.js --name Hello -i 4</code></pre><h3 id="Stop-Application"><a href="#Stop-Application" class="headerlink" title="Stop Application"></a>Stop Application</h3><pre><code class="bash">sudo pm2 stop Hello</code></pre><h3 id="Restart-Application"><a href="#Restart-Application" class="headerlink" title="Restart Application"></a>Restart Application</h3><pre><code class="bash">sudo pm2 restart Hello</code></pre><h3 id="List-Applications"><a href="#List-Applications" class="headerlink" title="List Applications"></a>List Applications</h3><pre><code class="bash">sudo pm2 list</code></pre><h3 id="Monitor-Application-Process"><a href="#Monitor-Application-Process" class="headerlink" title="Monitor Application Process"></a>Monitor Application Process</h3><pre><code class="bash">sudo pm2 monit</code></pre><p>For more usage of PM2 please refer <a href="https://pm2.keymetrics.io/docs/usage/quick-start/" target="_blank" rel="noopener">PM2 quick start</a>.</p><h2 id="NGINX-As-Reverse-Proxy"><a href="#NGINX-As-Reverse-Proxy" class="headerlink" title="NGINX As Reverse Proxy :"></a><a href="https://www.nginx.com" target="_blank" rel="noopener">NGINX</a> As Reverse Proxy :</h2><p>Till now we configure PM2 and running our node app in cluster seems all good, but are you still ready for production? How can you get rid of that port in your URL? Answer to all your question is Ngnix (Engine-X).</p><h3 id="What-is-NGINX"><a href="#What-is-NGINX" class="headerlink" title="What is NGINX?"></a>What is NGINX?</h3><p>Offically Nginx is a web server which can also be used as a reverse proxy, load balancer, mail proxy and HTTP cache. </p><p>Best practice to deploy NodeJS application in production, is by using Nginx as reverse proxy to route the web client’s requests to appropriate node process.</p><h3 id="Install-NGINX"><a href="#Install-NGINX" class="headerlink" title="Install NGINX"></a>Install NGINX</h3><p>Use following command to install Nginx on Ubuntu</p><pre><code class="bash">$ sudo apt-get update$ sudo apt-get install nginx</code></pre><h3 id="Configure-NGINX"><a href="#Configure-NGINX" class="headerlink" title="Configure NGINX"></a>Configure NGINX</h3><p>Open the nginx default site config file:</p><pre><code class="bash">$ sudo nano /etc/nginx/sites-available/default</code></pre><p>Now add below configuration in the file (You can take backup of orginal file for safer side)</p><pre><code class="bash">server {  listen       80;  server_name  mycooldomain.com;  location / {    proxy_pass http://localhost:4000;    proxy_http_version 1.1;    proxy_set_header Upgrade $http_upgrade;    proxy_set_header Connection &#39;upgrade&#39;;    proxy_set_header Host $host;    proxy_cache_bypass $http_upgrade;  }}</code></pre><p>As you can see the ngnix listning on <a href="http://mycooldomain.com" target="_blank" rel="noopener">http://mycooldomain.com</a> and the <code>location /</code> block take care of the incoming request and forwarding to NodeJs application.</p><p>Save the file and restart ngnix,</p><pre><code class="bash">$ sudo service nginx restart</code></pre><p>Now open your browser and navigate to <a href="http://mycooldomain.com" target="_blank" rel="noopener">http://mycooldomain.com</a>, you can see how node app is being served without using any port in URL.</p><p><strong>Congratulations</strong>!! You had successfully deployed NodeJs app on production using PM2 and Ngnix.</p><p>Hope you find this tutorial helpful. Don’t forget to share if its really help you. For any query please DM at <a href="https://twitter.com/meswapnilwagh" target="_blank" rel="noopener">Swapnil Wagh</a></p>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
            <tag> PM2 </tag>
            
            <tag> Cluster </tag>
            
            <tag> Production </tag>
            
            <tag> Ngnix </tag>
            
            <tag> Reverse Proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How To Generate &amp; Install SSL Certificate In Apache Web Server On Ubuntu</title>
      <link href="/2020/03/03/how-to-generate-and-install-ssl-certificate-in-apache-web-server-on-ubuntu-linux-servers/"/>
      <url>/2020/03/03/how-to-generate-and-install-ssl-certificate-in-apache-web-server-on-ubuntu-linux-servers/</url>
      
        <content type="html"><![CDATA[<p><strong>SSL</strong>, Secure Socket Layer is a protocol created in order to place normal traffic between server and client in encrypted and protected wrapper, without any possibility of traffic being intercepted in between of transmission. SSL certificates encrypt a site information and create more secure and trusted connection. Certificates can show server’s identification information to site visitors. Certificates Authorities like <a href="http://www.digicert.com/" target="_blank" rel="noopener">DigiCert</a> , <a href="http://godaddy.com/" target="_blank" rel="noopener">GoDaddy</a> can issue the self-signed SSL certificates that verify the server information. In this guide I will cover how to create a <strong>self-signed SSL certificates</strong> for Apache on an Ubuntu Server which will encrypt traffic to your server. As we are generating SSL certificates are for testing purpose and not issued by any Certificates Authorities it will not provide third party validation of your server identity, but still it will help you to transfer information securely.</p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites:"></a>Prerequisites:</h2><p>You need a Ubuntu server and a user with root / sudo privileges. You also need a Apache web server installed if its not there you can use following command to install Apache.</p><pre><code class="bash">$ sudo apt-get update $ sudo apt-get install apache2</code></pre><h2 id="Step-1-Enable-SSL-module-in-Apache"><a href="#Step-1-Enable-SSL-module-in-Apache" class="headerlink" title="Step 1: Enable SSL module in Apache:"></a>Step 1: Enable SSL module in Apache:</h2><p>In order to setup SSL certificates in Apache web server we need to enable the pre-installed Apache module. To enable SSL module in Apache use below command.</p><pre><code class="bash">$ sudo a2enmod ssl</code></pre><p>Once you enable the module we need to restart the Apache server for changes to be applied. Use below command to restart Apache:</p><pre><code class="bash">$ sudo service apache2 restart</code></pre><p>Now our server is ready to setup SSL.</p><h2 id="Step-2-Generate-a-Self-Signed-Certificates"><a href="#Step-2-Generate-a-Self-Signed-Certificates" class="headerlink" title="Step 2: Generate a Self-Signed Certificates:"></a>Step 2: Generate a Self-Signed Certificates:</h2><p>We will create a new directory where we will store server key and certificates.</p><pre><code class="bash">$ sudo mkdir /etc/apache2/ssl</code></pre><p>First you generate the keys for the Certificate Signing Request (CSR)</p><pre><code class="bash">$ cd /etc/apache2/ssl $ sudo openssl genrsa -des3 -out yourdomain.pkey 2048</code></pre><p>It will prompt you to enter passphrase. Its up to you to enter a passphrase or not. If you do, every time you restart the Apache service you will ask for this passphrase. We will enter a passphrase and then will create a ‘insecure’ key from ‘secure’ one. Create a insure key without a passphrase form a secure key <em><strong>yourdomain.pkey.</strong></em></p><pre><code class="bash">$ sudo openssl rsa -in yourdomain.pkey -out yourdomain.key</code></pre><p>And now we will create a CSR from the key file. With the CSR and key file a self-signed certificate can be generated.</p><pre><code class="bash">$ sudo openssl req -new -key yourdomain.key -out yourdomain.csr</code></pre><p>Once enter will ask you number of questions one most important is Common Name use your domain or IP of you server as a value.</p><pre><code class="bash">You are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter &#39;.&#39;, the field will be left blank.-----Country Name (2 letter code) [AU]:USState or Province Name (full name) [Some-State]:New YorkLocality Name (eg, city) []:NYCOrganization Name (eg, company) [Internet Widgits Pty Ltd]:Organization Pvt. LtdOrganizational Unit Name (eg, section) []:Common Name (e.g. server FQDN or YOUR name) []:yourdomain.comEmail Address []:webmaster@yourdomain.com</code></pre><p>Once we have CSR and key file now we can generate a self-signed certificate using following command</p><pre><code class="bash">$ sudo openssl x509 -req -days 365 -in yourdomain.csr -signkey yourdomain.key -out yourdomain.crt</code></pre><h2 id="Step-3-Configure-Apache-to-use-the-Signed-SSL-Certificate"><a href="#Step-3-Configure-Apache-to-use-the-Signed-SSL-Certificate" class="headerlink" title="Step 3 : Configure Apache to use the Signed SSL Certificate :"></a>Step 3 : Configure Apache to use the Signed SSL Certificate :</h2><p>Now that we have all our necessary certificates and key file available, now we can configure Apache to use these in VirtualHost. Next, add an entry to <code>/etc/apache2/ports.conf</code> for the domain you’ll be using to host your SSL-enabled site.</p><pre><code class="bash">NameVirtualHost yourdomain.com:443</code></pre><p>Now create  a Apache configuration file with VirtualHost entry for your site. Create a file <code>yourdomain-ssl</code> with below contain in <code>/etc/apache2/site-available/</code>folder of Apache.</p><pre><code class="config">&lt;VirtualHost yourdomain.com:443&gt;    SSLEngine On    SSLCertificateFile /etc/apache2/ssl/yourdomain.crt    SSLCertificateKeyFile /etc/apache2/ssl/yourdomain.key    ServerName http://www.yourdomain.com    ServerAlias yourdomain.com    DocumentRoot /var/www/yourdomain    &lt;Directory /var/www/yourdomain&gt;        Options Indexes FollowSymLinks MultiViews        AllowOverride All        Order allow,deny        allow from all    &lt;/Directory&gt;&lt;/VirtualHost&gt;</code></pre><h2 id="Step-4-Permanent-Redirection-to-https"><a href="#Step-4-Permanent-Redirection-to-https" class="headerlink" title="Step 4 : Permanent Redirection to https :"></a>Step 4 : Permanent Redirection to https :</h2><p>To redirect your site permanently to https we will edit the VirtualHost entry for for 80 port which is in a file <code>yourdomin</code>in <code>/etc/apache2/site-available</code> folder of Apache, or else create one with below contain.</p><pre><code class="config">&lt;VirtualHost *:80&gt;    ServerName http://www.yourdomain.com    ServerAlias yourdomain.com    DocumentRoot /var/www/yourdomain    Redirect / https://www.yourdomain.com&lt;/VirtualHost&gt;</code></pre><p>Or else you can create <code>.htaccess</code> file in your site root folder for permanent redirection to https with below contain</p><pre><code class="config">RewriteEngine OnRewriteCond %{HTTPS} off [OR]RewriteCond %{HTTP_HOST} ^yourdomain\.com$ [NC]RewriteRule ^ https://www.yourdomain.com%{REQUEST_URI} [L,R=301]</code></pre><h2 id="Step-5-Test-your-Apache-config-and-activate-the-VirtualHost"><a href="#Step-5-Test-your-Apache-config-and-activate-the-VirtualHost" class="headerlink" title="Step 5 : Test your Apache config and activate the VirtualHost :"></a>Step 5 : Test your Apache config and activate the VirtualHost :</h2><p>It is always a good practice to check your Apache configuration for any error before we activate the VirtualHost and restart the Apache service, cause Apache will not start if your configuration file has some errors. Run below command to test configuration</p><pre><code class="bash">$ apachectl configtest</code></pre><p>If your configuration is right then activate the VirtualHost using below command</p><pre><code class="bash">$ sudo a2ensite yourdomain      // Simple http configuration file $ sudo a2ensite yourdomain-ssl     // SSL configuration file</code></pre><p>Now, restart the Apache service for changes to take effect</p><pre><code class="bash">$ sudo service apache2 restart</code></pre><h2 id="Step-5-Test-your-Setup"><a href="#Step-5-Test-your-Setup" class="headerlink" title="Step 5 : Test your Setup :"></a>Step 5 : Test your Setup :</h2><p>Now, that we have everything prepared and done you can try visiting your server domain name or public IP using the https protocol like this <code>https://yourdomin.com.</code> You will get a security warning from browser regarding your server identity because we are using self-signed certificates and it has been not signed by any certificate authority that browser trust.</p><p><a href="https://opensourceholic.files.wordpress.com/2014/05/ssl_warning.png" target="_blank" rel="noopener"><img src="https://opensourceholic.files.wordpress.com/2014/05/ssl_warning.png?w=646" alt="ssl_warning"></a></p><p>Since this is expected you can move ahead, hit ‘Proceed Anyway’ button. Once Added Security Exception for your browser you will taken to the your site this time with encrypted traffic, check the SSL configuration by clicking on lock icon in address bar.</p><p><a href="https://opensourceholic.files.wordpress.com/2014/05/encrypted.png" target="_blank" rel="noopener"><img src="http://opensourceholic.files.wordpress.com/2014/05/encrypted.png" alt="encrypted"></a></p><p>Hope you find this tutorial helpful. Feel free to ask questions! Don’t forget to like or to leave a comment if its really help you.</p>]]></content>
      
      
      <categories>
          
          <category> SSL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apache </tag>
            
            <tag> VirtualHost </tag>
            
            <tag> Certificates </tag>
            
            <tag> SSL </tag>
            
            <tag> http </tag>
            
            <tag> 301 </tag>
            
            <tag> Apache web server </tag>
            
            <tag> crt </tag>
            
            <tag> csr </tag>
            
            <tag> https </tag>
            
            <tag> key </tag>
            
            <tag> openSSL </tag>
            
            <tag> permanat </tag>
            
            <tag> redirect </tag>
            
            <tag> self-signed </tag>
            
            <tag> SSL certificates </tag>
            
            <tag> Ubuntu server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How To Replace a lost Key Pair with new one on an EC2 instance</title>
      <link href="/2020/02/24/how-to-replace-a-lost-key-pair-with-new-one-on-an-ec2-instance/"/>
      <url>/2020/02/24/how-to-replace-a-lost-key-pair-with-new-one-on-an-ec2-instance/</url>
      
        <content type="html"><![CDATA[<p>Access to Amazon <a href="http://aws.amazon.com/ec2/" target="_blank" rel="noopener">EC2</a> instances specially the Linux instances are always protected by a private key pair. Private key is only the way to get access to the instance, what if you lost the key? Is your servers lost in black hole? Thankfully nothing is lost you still can access your server, let me show you how can you solve this problem.<br>            <img src="https://opensourceholic.files.wordpress.com/2015/10/30f249d.jpg" alt="AmazonEC2"></p><p>Before we proceed please not that to do this we need to stop our running instance that means what ever app or website running on the serer will be offline for that period. In order to do this process we need the EC2 root volume to be an <a href="http://aws.amazon.com/ebs/" target="_blank" rel="noopener">EBS</a>. </p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Launch-New-Instance"><a href="#Launch-New-Instance" class="headerlink" title="Launch New Instance"></a>Launch New Instance</h3><p>First thing we need is to start and one instance with a key pair that we can access we will use this instance for recovering the old EBS. New instance must be created in same Availability Zone of the original instance. Firstly we will note down the original instance AZ.</p><p><img src="https://opensourceholic.files.wordpress.com/2015/10/1446188775565.jpg" alt="Check Zone"></p><p>Now we will launch the new instance using the Launch Instance wizard, make sure that we are launching the instance same AZ in which our original instance is. You can chose AZ from *<em>subnet *</em>as shown in below image. </p><p><img src="https://opensourceholic.files.wordpress.com/2015/10/1446188985851.jpg" alt="Launch Wizard"></p><p>Before we actually launch the instance we will see the key pair section from there we will create and download a new key pair and then we will launch the instance.</p><p><img src="https://opensourceholic.files.wordpress.com/2015/10/1446189267596.jpg" alt="Create New Key Pair"></p><h3 id="Stop-Original-Instance"><a href="#Stop-Original-Instance" class="headerlink" title="Stop Original Instance"></a>Stop Original Instance</h3><p>When the new instance is ready, now we will detach the volume of original instance and attach it to new instance, in order to do that we need to stop the original instance. To stop the instance right click on the instance go to Instance State and chose Stop option.</p><p><img src="https://opensourceholic.files.wordpress.com/2015/10/1446189440828.jpg" alt="Stop Instance"></p><h3 id="Detach-Volume"><a href="#Detach-Volume" class="headerlink" title="Detach Volume"></a>Detach Volume</h3><p>Now our instance is stop then we go to the volume section in EC2 console. Here we will look for the original instance root volume, using the <code>Attachment Information</code>.This column shows to which instance the volume is attach and its device path usually the root drive path is <code>/dev/sad1.</code>Now we will Detach the volume from original instance, in order to do that right click on volume and chose Detach Volume option.</p><p><img src="https://opensourceholic.files.wordpress.com/2015/10/1446189973622.jpg" alt="Detach Volume"></p><h3 id="Attach-Volume"><a href="#Attach-Volume" class="headerlink" title="Attach Volume"></a>Attach Volume</h3><p>Once we detach the volume, now we need to attach the volume to the Recovery instance, right click on the volume and chose Attach Volume option in dialog we will select the Recovery instance and also add a device path as <code>/dev/xvdf</code> (or <code>/dev/sdf</code>)</p><p><img src="https://opensourceholic.files.wordpress.com/2015/10/selection_002.png" alt="Attach Volume"></p><p>Once we attach the volume to recovery instance we are now ready to mount that in same instance. We can access the instance using the key pair generated during the instance launch. To access instance use below command</p><p> Setting the rigth permissions for the .pem file: </p><pre><code class="bash"> $ chmod 600 NewKeyPair.pem </code></pre><p> Connecting to the instance using the certificate: </p><pre><code class="bash"> $ ssh -i NewKeyPair.pem ubuntu@public_ip</code></pre><h3 id="Copy-Key"><a href="#Copy-Key" class="headerlink" title="Copy Key"></a>Copy Key</h3><p>Once you are connected to the instance now we have to mount the attach volume and copy the <code>authorized_keys</code> file from new instance to the mounted drive at same location. Use below command to mount and copy the file.</p><p>Becoming root: </p><pre><code class="bash">$ sudo -i </code></pre><p>Creating the mount point:</p><pre><code class="bash">$ mkdir /mnt/original</code></pre><p>Mounting the volume: </p><pre><code class="bash">$ mount /dev/xvdf /mnt/original</code></pre><p>Replace the authorized_keys file with the new one. Now access to the Old instance will be possible only using the new pem. Path and name of file depends on the Linux Flavor you are using.</p><pre><code class="bash">cat /home/ubuntu/.ssh/authorized_keys &gt; /mnt/original/home/ubuntu/.ssh/authorized_keys </code></pre><p>Unmunt the volume:</p><pre><code class="bash">$ umount /mnt/original/</code></pre><p>Once we are done with copying the keys, now we will detach the volume from recovery instance by right clicking on volume and choosing the detach volume option as we do it earlier. After that we will re-attach it to the Original instance, make sure when you are re-attaching the volume that should on on root path so enter <code>/dev/sda1</code> in device path option.</p><p><img src="https://opensourceholic.files.wordpress.com/2015/10/selection_003.png" alt="Originalvolume"></p><h3 id="Access-Using-New-Key"><a href="#Access-Using-New-Key" class="headerlink" title="Access Using New Key"></a>Access Using New Key</h3><p>Now we can start the original instance back, and now you can access it using the new key pair.</p><p>You can use same steps in case your machine is not accessible and you want access to your data in EBS.</p><p>Hope you find this tutorial helpful. Feel free to ask questions! Don’t forget to like or to leave a comment if its really help you.</p>]]></content>
      
      
      <categories>
          
          <category> AWS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> geek </tag>
            
            <tag> amazon </tag>
            
            <tag> EC2 </tag>
            
            <tag> pem </tag>
            
            <tag> access </tag>
            
            <tag> AWS </tag>
            
            <tag> KeyPair </tag>
            
            <tag> recover </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
